// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles     Article[]      @relation("UserArticles")
  comments     Comment[]
  favorites    Favorite[]
  following    Follow[]       @relation("UserFollowing") // Những người mình theo dõi
  followers    Follow[]       @relation("UserFollowers") // Những người theo dõi mình
  refreshToken RefreshToken[]
}

model RefreshToken {
  token     String   @id
  userId    Int      @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author_id Int
  author    User @relation("UserArticles", fields: [author_id], references: [id])

  comments  Comment[]
  tags      ArticleTag[]
  favorites Favorite[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author_id  Int
  article_id Int

  author  User    @relation(fields: [author_id], references: [id])
  article Article @relation(fields: [article_id], references: [id])
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  articles ArticleTag[]
}

model ArticleTag {
  article_id Int
  tag_id     Int

  article Article @relation(fields: [article_id], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([article_id, tag_id])
}

model Favorite {
  user_id    Int
  article_id Int

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  article Article @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@id([user_id, article_id])
}

model Follow {
  followerId Int
  followeeId Int

  follower User @relation("UserFollowing", fields: [followerId], references: [id])
  followee User @relation("UserFollowers", fields: [followeeId], references: [id])

  @@id([followerId, followeeId])
}
